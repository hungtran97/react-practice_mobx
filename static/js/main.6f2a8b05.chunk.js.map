{"version":3,"sources":["stores/session_store.ts","Login/index.tsx","avatar.jpeg","Home/index.tsx","Toast.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SessionStore","makeObservable","this","isLogin","type","message","email","password","fakeLogin","res","localStorage","setItem","Promise","resolve","reject","setTimeout","test","target","observable","action","setAlert","Login","observer","store","useState","setRes","setEmail","setPassword","handleSubmit","e","a","preventDefault","login","response","to","Card","className","Body","Form","onSubmit","Group","controlId","Label","Control","name","placeholder","onChange","currentTarget","value","Text","Check","label","Button","variant","Home","url","setUrl","Container","Row","Col","md","Image","style","overflow","maxHeight","src","avatar","roundedCircle","f","reader","FileReader","file","readAsDataURL","onloadend","result","changeAvatar","files","getItem","size","onClick","logout","Toast","Alert","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f2a8b05.chunk.js","sourcesContent":["import { observable, action, makeObservable } from 'mobx';\nimport { setTimeout } from 'timers';\n\nclass SessionStore {\n  @observable isLogin: boolean;\n  @observable type: string;\n  @observable message: string;\n\n  constructor() {\n    makeObservable(this);\n    this.isLogin = false;\n    this.type = '';\n    this.message = '';\n  }\n\n  @action\n  setAlert = (type: string, message: string) => {\n    this.type = type;\n    this.message = message;\n  };\n\n  @action\n  public async login(email: string, password: string) {\n    try {\n      let res = await this.fakeLogin(email, password);\n      localStorage.setItem('email', email);\n      this.isLogin = true;\n      return res;\n    } catch (error) {\n      return error;\n    }\n  }\n\n  @action\n  logout = () => {\n    this.isLogin = false;\n    this.setAlert('success', 'Logout successfully!');\n\n    localStorage.setItem('email', '');\n  };\n\n  private async fakeLogin(email: string, password: string): Promise<any> {\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (!/^[a-zA-Z0-9]+@[a-zA-Z0-9]+\\.[A-Za-z]+$/.test(email)) {\n          reject({\n            type: 'error',\n            target: 'email',\n            message: 'Email Invalid!',\n          });\n        }\n\n        if (password !== 'ows') {\n          reject({\n            type: 'error',\n            target: 'password',\n            message: 'Password Invalid!',\n          });\n        }\n\n        resolve({\n          type: 'success',\n          target: '',\n          message: 'Login Successfully!',\n        });\n      }, 2000);\n    });\n  }\n}\n\nexport default SessionStore;\n","import { observer } from 'mobx-react';\nimport React, { useState, useEffect } from 'react';\nimport { Button, Card, Form } from 'react-bootstrap';\nimport { Redirect } from 'react-router';\n\n// type LoginState = {\n//   type: string;\n//   target: string;\n//   message: string;\n// };\nconst Login: React.FC<any> = observer(({ store }) => {\n  const [res, setRes] = useState({ type: '', target: '', message: '' });\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n\n  const handleChangeEmail = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(e.currentTarget.value);\n  };\n  const handleChangePassword = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setPassword(e.currentTarget.value);\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    let response = await store.login(email, password);\n    setRes(response);\n    store.setAlert(response.type, response.message);\n  };\n  if (store.isLogin) {\n    return <Redirect to='/home' />;\n  } else {\n    return (\n      <>\n        <h1> Login </h1>\n        <Card className='form-login'>\n          <Card.Body>\n            <Form onSubmit={handleSubmit}>\n              <Form.Group controlId='email'>\n                <Form.Label> Email </Form.Label>\n                <Form.Control\n                  type='text'\n                  name='email'\n                  placeholder='admin@ows.vn'\n                  onChange={handleChangeEmail}\n                />\n                <Form.Text className='text-danger'>\n                  {res.target === 'email' ? res.message : ''}\n                </Form.Text>\n              </Form.Group>\n              <Form.Group controlId='password'>\n                <Form.Label> Password </Form.Label>\n                <Form.Control\n                  type='password'\n                  name='password'\n                  placeholder='ows'\n                  onChange={handleChangePassword}\n                />\n                <Form.Text className='text-danger'>\n                  {res.target === 'password' ? res.message : ''}\n                </Form.Text>\n              </Form.Group>\n              <Form.Group controlId='remember'>\n                <Form.Check\n                  type='checkbox'\n                  name='remember'\n                  label='remember me?'\n                />\n              </Form.Group>\n              <Button variant='primary' type='submit'>\n                Login\n              </Button>\n            </Form>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  }\n});\n\nexport default Login;\n","export default __webpack_public_path__ + \"static/media/avatar.f4eb2a3e.jpeg\";","import { observer } from 'mobx-react';\nimport React, { useState } from 'react';\nimport {\n  Card,\n  Form,\n  Button,\n  Container,\n  Image,\n  Row,\n  Col,\n} from 'react-bootstrap';\nimport { Redirect } from 'react-router';\n\nimport './home.css';\nimport avatar from '../avatar.jpeg';\n\nconst Home: React.FC<any> = observer(({ store }) => {\n  const [url, setUrl] = useState('');\n  const changeAvatar = (f: FileList): any => {\n    let reader = new FileReader();\n    const file = f[0];\n    reader.readAsDataURL(file);\n    reader.onloadend = () => {\n      setUrl(reader.result as string);\n    };\n  };\n  if (store.isLogin)\n    return (\n      <>\n        <h1> Home </h1>\n        <Card className='home'>\n          <Card.Body>\n            <Container>\n              <Row>\n                <Col md='12'>\n                  <Image\n                    style={{ overflow: 'hidden', maxHeight: '100px' }}\n                    src={url ? url : avatar}\n                    roundedCircle\n                  />\n                </Col>\n                <Col md='12'>\n                  <Form>\n                    <Form.Group className='avatar-select'>\n                      <input\n                        name='avatar'\n                        type='file'\n                        onChange={(e) =>\n                          changeAvatar(e.target.files as FileList)\n                        }\n                      />\n                    </Form.Group>\n                  </Form>\n                </Col>\n              </Row>\n              <Row>\n                <Col md='12'>{localStorage.getItem('email')}</Col>\n              </Row>\n              <Row>\n                <Col md='12'>\n                  <Button size='sm' onClick={store.logout()}>\n                    Logout\n                  </Button>\n                </Col>\n              </Row>\n            </Container>\n          </Card.Body>\n        </Card>\n      </>\n    );\n  else return <Redirect to='/login' />;\n});\n\nexport default Home;\n","import { observer } from 'mobx-react';\nimport { Alert } from 'react-bootstrap';\n\nconst Toast: React.FC<any> = observer(({ store }) => {\n  return (\n    <div className='custom-toast'>\n      {store.message ? (\n        <Alert variant={store.type === 'success' ? 'success' : 'danger'}>\n          {store.message}\n        </Alert>\n      ) : (\n        ''\n      )}\n    </div>\n  );\n});\n\nexport default Toast;\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport SessionStore from './stores/session_store';\nimport Login from './Login';\nimport Home from './Home';\nimport Toast from './Toast';\nimport './App.css';\n\nconst App: React.FC = observer(() => {\n  const store = new SessionStore();\n  return (\n    <div className='App'>\n      <Toast store={store} />\n      <Router>\n        <Switch>\n          <Route path='/login'>\n            <Login store={store} />\n          </Route>\n          <Route path='/home'>\n            <Home store={store} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n});\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}